import random
from idlelib.run import MyHandler

import telebot
from telebot import types
import psycopg2
# from telebot.states import StatesGroup, State

token = ''
password = ''
bot = telebot.TeleBot(token)
conn = psycopg2.connect(database='ignatev_english_db', user='postgres', password=password)
emo = [['üòâ', 'üòÉ', 'üôÉ', 'üòÄ', 'ü§©', '‚ò∫', 'ü§ó', 'ü´°', 'ü§ì', 'üíØ', 'ü§†'],
       ['üòü', 'üòß', 'üò¢', 'ü•∫', '‚òπ', 'üôâ', 'üôà', 'üôä', 'üßê', 'ü§ï', 'ü•¥']]

my_states = {'level':'','words':[], 'target_word':'', 'translation':'', 'other_words':[]}
new_word = {'word': '', 'translation': '', 'level': ''}

menu = ['–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô', '–î–∞–ª—å—à–µ ‚è≠', '–°–±—Ä–æ—Å ñ£ò']

def choose_level(level, id):
    user_id = id
    if level == '–ù–æ–≤–∏—á–æ–∫(A)':
        with conn.cursor() as cur:
            cur.execute(f"""
                    SELECT word, translation FROM words w RIGHT JOIN words_for_users wu
                    ON w.id = wu.word_id                
                    WHERE w.level LIKE '%A%' AND wu.user_id = {id}
                    ORDER BY RANDOM()
                    LIMIT 4
                """)
            conn.commit()
            words = cur.fetchall()
    elif level == '–°—Ä–µ–¥–Ω–∏–π(B)':
        with conn.cursor() as cur:
            cur.execute(f"""
                    SELECT word, translation FROM words w RIGHT JOIN words_for_users wu
                    ON w.id = wu.word_id
                    WHERE w.level LIKE '%B%' AND wu.user_id = {id}
                    ORDER BY RANDOM()
                    LIMIT 4
                """)
            conn.commit()
            words = cur.fetchall()
    elif level == '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π(C1)':
        with conn.cursor() as cur:
            cur.execute(f"""
                    SELECT word, translation FROM words w RIGHT JOIN words_for_users wu
                    ON w.id = wu.word_id
                    WHERE w.level LIKE '%C1%' AND wu.user_id = {id}
                    ORDER BY RANDOM()
                    LIMIT 4
                """)
            conn.commit()
            words = cur.fetchall()
    elif level == '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª(C2)':
        with conn.cursor() as cur:
            cur.execute(f"""
                    SELECT word, translation FROM words w RIGHT JOIN words_for_users wu
                    ON w.id = wu.word_id
                    WHERE w.level LIKE '%C2%' AND wu.user_id = {id}
                    ORDER BY RANDOM()
                    LIMIT 4
                """)
            conn.commit()
            words = cur.fetchall()
    return words

@bot.message_handler(commands=['—Å—Ç–∞—Ä—Ç', 'start', '–Ω–∞—á–∞—Ç—å', '—Å–±—Ä–æ—Å', 'reset'])
def send_welcome(message):
    user_id = message.chat.id
    with conn.cursor() as cur:
        cur.execute("""
            SELECT id FROM users
        """)
        ids = [tup[0] for tup in cur.fetchall()]
        print(ids)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π - —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ —Å–≤–æ—é –±–∞–∑—É —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å
    if user_id not in ids:
        with conn.cursor() as cur:

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
            cur.execute("""
                INSERT INTO users
                VALUES (%s, %s, %s)
            """, (user_id, message.from_user.first_name, message.from_user.last_name))

            # –ù–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ–≤–∞–º–∏ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                INSERT INTO words_for_users (word_id, user_id)
                SELECT id, '%s' FROM words
                WHERE added_by_user = FALSE
            """, (user_id,))

            conn.commit()

    bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ù–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ?)""")
    markup = types.ReplyKeyboardMarkup(row_width=2)
    levels = ['–ù–æ–≤–∏—á–æ–∫(A)', '–°—Ä–µ–¥–Ω–∏–π(B)', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π(C1)', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª(C2)']
    level_btns = [types.KeyboardButton(level) for level in levels]
    markup.add(*level_btns)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–°–±—Ä–æ—Å ñ£ò')
def reset(message):
    send_welcome(message)

@bot.message_handler(func=lambda m: True)
def pick_words(message):
    user_id = message.chat.id
    global my_states
    if message.text in ['–ù–æ–≤–∏—á–æ–∫(A)', '–°—Ä–µ–¥–Ω–∏–π(B)', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π(C1)', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª(C2)']:
        my_states['level'] = message.text
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {my_states['level']}")
    if message.text in my_states['other_words'] + [my_states['translation']]:
        if message.text == my_states['translation']:
            bot.reply_to(message, f'–í–µ—Ä–Ω–æ! {random.choice(emo[0])}')
        else:
            bot.reply_to(message, f"""–ù–µ–≤–µ—Ä–Ω–æ! {random.choice(emo[1])} \n"""
                                  f"""–°–ª–æ–≤–æ "{message.text}" –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ "{dict(my_states['words'])[message.text]}" \n"""
                                  f"""–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ - "{my_states['translation']}". –ò–¥–µ–º –¥–∞–ª—å—à–µ!""")
    if message.text not in menu or message.text in ['–î–∞–ª—å—à–µ ‚è≠', '–Ω–µ—Ç ‚úò']:
        my_states['words'] = choose_level(my_states['level'], id=user_id)
        my_states['target_word'] = my_states['words'][0][1]
        my_states['translation'] = my_states['words'][0][0]
        my_states['other_words'] = [my_states['words'][1][0], my_states['words'][2][0], my_states['words'][3][0]]
        print(my_states['words'])
        markup = types.ReplyKeyboardMarkup(row_width=2)
        translation_btn = types.KeyboardButton(my_states['translation'])
        other_words_btns = [types.KeyboardButton(word) for word in my_states['other_words']]
        option_btns = [translation_btn] + other_words_btns
        menu_btns = [types.KeyboardButton(b) for b in menu]
        random.shuffle(option_btns)
        markup.add(*option_btns)
        markup.add(*menu_btns)
        bot.send_message(message.from_user.id, f"""–ü–µ—Ä–µ–≤–µ–¥–∏ "{my_states['target_word']}" –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π""",
                         reply_markup=markup)

    if message.text == menu[0]:
        markup = types.ReplyKeyboardRemove()
        bot.reply_to(message, "–ö–∞–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? \n"
                              "–ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –µ–≥–æ ...", reply_markup=markup)
        bot.register_next_step_handler(message, add_word)

    if message.text == menu[1]:
        markup = types.ReplyKeyboardRemove()
        bot.send_message(user_id, "–ö–∞–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã? \n"
                                  "–ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –µ–≥–æ ...", reply_markup=markup)
        bot.register_next_step_handler(message, delete_word)

def add_word(message):
    global new_word
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
                    SELECT word
                    FROM words_for_users wu JOIN words w
                    ON wu.word_id = w.id 
                    WHERE user_id = %s AND word LIKE %s
                """, (user_id, message.text))
        res = cur.fetchone()
        if res:
            print('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –ë–∞–∑–µ')

        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–±–∞–≤–∏–º –µ–≥–æ
        else:
            new_word['word'] = message.text
            bot.reply_to(message, f"–ö–∞–∫–æ–π —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞? \n"
                                  f"–ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –µ–≥–æ ...")
            bot.register_next_step_handler(message, add_translation)

def add_translation(message):
    global new_word
    new_word['translation'] = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    levels = ['–ù–æ–≤–∏—á–æ–∫(A)', '–°—Ä–µ–¥–Ω–∏–π(B)', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π(C1)', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª(C2)']
    level_btns = [types.KeyboardButton(level) for level in levels]
    markup.add(*level_btns)
    bot.reply_to(message, f"–ö–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —ç—Ç–æ —Å–ª–æ–≤–æ?", reply_markup=markup)
    bot.register_next_step_handler(message, add_level)

def add_level(message):
    global new_word
    if message.text == '–ù–æ–≤–∏—á–æ–∫(A)' or message.text == '–°—Ä–µ–¥–Ω–∏–π(B)':
        new_word['level'] = str(message.text[-2])+'2'
    elif message.text == '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π(C1)' or message.text == '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª(C2)':
        new_word['level'] = message.text[-3:-1]
    markup = types.ReplyKeyboardMarkup(row_width=2)
    options = ['–¥–∞ ‚úî', '–Ω–µ—Ç ‚úò']
    option_btns = [types.KeyboardButton(o) for o in options]
    markup.add(*option_btns)
    bot.send_message(message.chat.id, f"""–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ "{new_word['word']}"\n"""
                                        f"""—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º "{new_word['translation']}"\n"""
                                        f"""—É—Ä–æ–≤–Ω—è {new_word['level']}?""",
                     reply_markup=markup)
    bot.register_next_step_handler(message, confirm)

def confirm(message):
    global new_word
    user_id = int(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    next_btn = types.KeyboardButton(menu[2])
    markup.add(next_btn)
    if message.text == '–¥–∞ ‚úî':
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO words (word, translation, level, added_by_user)
                VALUES (%s, %s, %s, True)
            """, (new_word['word'], new_word['translation'], new_word['level']))

            cur.execute("""
                INSERT INTO words_for_users
                VALUES (%s, (SELECT id FROM words WHERE word LIKE %s))
            """, (user_id, new_word['word']))
        conn.commit()
        bot.register_next_step_handler(message, pick_words)
        bot.send_message(user_id, f"–°–ª–æ–≤–æ {new_word['word']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=markup)
    elif message.text == '–Ω–µ—Ç ‚úò':
        bot.send_message(user_id, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup)
    else:
        bot.send_message(user_id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        options = ['–¥–∞ ‚úî', '–Ω–µ—Ç ‚úò']
        option_btns = [types.KeyboardButton(o) for o in options]
        markup.add(*option_btns)
        bot.send_message(message.chat.id, f"""–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ "{new_word['word']}"\n"""
                                          f"""—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º "{new_word['translation']}"\n"""
                                          f"""—É—Ä–æ–≤–Ω—è {new_word['level']}?""",
                         reply_markup=markup)
        bot.register_next_step_handler(message, confirm)

def delete_word(message):
    user_id = message.chat.id
    word = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    next_btn = types.KeyboardButton(menu[2])
    markup.add(next_btn)
    with conn.cursor() as cur:
        cur.execute("""
            DELETE FROM words_for_users
            WHERE user_id = %s AND word_id = (SELECT id FROM words
                WHERE word LIKE %s AND added_by_user = True
            )
        """, (user_id, word))
        conn.commit()
        deleted_rows = cur.rowcount
        if deleted_rows == 0:
            bot.register_next_step_handler(message, pick_words)
            bot.send_message(user_id, f"""–°–ª–æ–≤–∞ "{word}" –Ω–µ—Ç –≤ –≤–∞—à–µ–π –±–∞–∑–µ""", reply_markup=markup)
        else:
            bot.register_next_step_handler(message, pick_words)
            bot.send_message(user_id, f"""–°–ª–æ–≤–æ "{word}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã""", reply_markup=markup)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.polling()